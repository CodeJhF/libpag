// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by PAGMeta. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#ifndef PAG_METADATA__USERS_CHEN_WORK_PAGPLAYER_SRC_GENERATED_PAG_RTTTR_HPP
#define PAG_METADATA__USERS_CHEN_WORK_PAGPLAYER_SRC_GENERATED_PAG_RTTTR_HPP

#include "pag/file.h"
#include "pag/types.h"
#include "rttr/registration.h"
using namespace rttr;

// TODO Consider using other solution to replace this file


static std::map<std::string,std::map<std::string,pag::Enum>> PAG_Enums;
static std::map<std::string,std::string> PAG_Enums_Usage;

#define REG_PAG_PROPERTY(type,pname,aname,kname) 	\
    registration::class_<pag::Property<type>>(pname) \
        .property("value",&pag::Property<type>::value);\
    registration::class_<pag::AnimatableProperty<type>>(aname) \
        .property("keyframes",&pag::AnimatableProperty<type>::keyframes); \
    registration::class_<pag::Keyframe<type>>(kname) \
        .property("startValue",&pag::Keyframe<type>::startValue) \
        .property("endValue",&pag::Keyframe<type>::endValue) \
        .property("startTime",&pag::Keyframe<type>::startTime) \
        .property("endTime",&pag::Keyframe<type>::endTime) \
        .property("interpolationType",&pag::Keyframe<type>::interpolationType) \
        .property("bezierOut",&pag::Keyframe<type>::bezierOut) \
        .property("bezierIn",&pag::Keyframe<type>::bezierIn) \
        .property("spatialOut",&pag::Keyframe<type>::spatialOut) \
        .property("spatialIn",&pag::Keyframe<type>::spatialIn);



RTTR_REGISTRATION
{
	// Enum (\w+) = (\w+)(::\w+) -> PAG_Enums_Usage["$1"] = "pag::$2"

	PAG_Enums_Usage["pag::TextDocument::justification"] = "pag::ParagraphJustification";
	PAG_Enums_Usage["pag::TextDocument::direction"] = "pag::TextDirection";
	PAG_Enums_Usage["pag::Keyframe::interpolationType"] = "pag::KeyframeInterpolationType";
	PAG_Enums_Usage["pag::Mask::maskMode"] = "pag::MaskMode";
	PAG_Enums_Usage["pag::DropShadowStyle::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::StrokeStyle::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::ShapeGroupElement::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::FillElement::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::StrokeElement::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::GradientFillElement::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::TextMoreOptions::anchorPointGrouping"] = "pag::AnchorPointGrouping";
	PAG_Enums_Usage["pag::PolyStarElement::polyType"] = "pag::PolyStarType";
	PAG_Enums_Usage["pag::FillElement::composite"] = "pag::CompositeOrder";
	PAG_Enums_Usage["pag::FillElement::fillRule"] = "pag::FillRule";
	PAG_Enums_Usage["pag::StrokeElement::composite"] = "pag::CompositeOrder";
	PAG_Enums_Usage["pag::StrokeElement::lineCap"] = "pag::LineCap";
	PAG_Enums_Usage["pag::StrokeElement::lineJoin"] = "pag::LineJoin";
	PAG_Enums_Usage["pag::GradientFillElement::composite"] = "pag::CompositeOrder";
	PAG_Enums_Usage["pag::GradientFillElement::fillRule"] = "pag::FillRule";
	PAG_Enums_Usage["pag::GradientFillElement::fillType"] = "pag::GradientFillType";
	PAG_Enums_Usage["pag::GradientStrokeElement::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::GradientStrokeElement::composite"] = "pag::CompositeOrder";
	PAG_Enums_Usage["pag::GradientStrokeElement::fillType"] = "pag::GradientFillType";
	PAG_Enums_Usage["pag::GradientStrokeElement::lineCap"] = "pag::LineCap";
	PAG_Enums_Usage["pag::GradientStrokeElement::lineJoin"] = "pag::LineJoin";
	PAG_Enums_Usage["pag::MergePathsElement::mode"] = "pag::MergePathsMode";
	PAG_Enums_Usage["pag::TrimPathsElement::trimType"] = "pag::TrimPathsType";
	PAG_Enums_Usage["pag::RepeaterElement::composite"] = "pag::RepeaterOrder";
	PAG_Enums_Usage["pag::Layer::blendMode"] = "pag::BlendMode";
	PAG_Enums_Usage["pag::Layer::trackMatteType"] = "pag::TrackMatteType";
	PAG_Enums_Usage["pag::Layer::cachePolicy"] = "pag::CachePolicy";
	PAG_Enums_Usage["pag::ImageFillRule::scaleMode"] = "pag::PAGScaleMode";
	PAG_Enums_Usage["pag::File::timeStretchMode"] = "pag::PAGTimeStretchMode";
	PAG_Enums_Usage["pag::FastBlurEffect::blurDimensions"] = "pag::BlurDimensionsDirection";
	PAG_Enums_Usage["pag::RadialBlurEffect::mode"] = "pag::RadialBlurMode";
	PAG_Enums_Usage["pag::RadialBlurEffect::antialias"] = "pag::RadialBlurAntialias";
	PAG_Enums_Usage["pag::StrokeStyle::position"] = "pag::StrokePosition";
	PAG_Enums_Usage["pag::CameraOption::irisShape"] = "pag::IrisShapeType";


    registration::enumeration<pag::TagCode>("pag::TagCode")(
        value("End",pag::TagCode::End),
        value("FontTables",pag::TagCode::FontTables),
        value("VectorCompositionBlock",pag::TagCode::VectorCompositionBlock),
        value("CompositionAttributes",pag::TagCode::CompositionAttributes),
        value("ImageTables",pag::TagCode::ImageTables),
        value("LayerBlock",pag::TagCode::LayerBlock),
        value("LayerAttributes",pag::TagCode::LayerAttributes),
        value("SolidColor",pag::TagCode::SolidColor),
        value("TextSource",pag::TagCode::TextSource),
        value("TextPathOption",pag::TagCode::TextPathOption),
        value("TextMoreOption",pag::TagCode::TextMoreOption),
        value("ImageReference",pag::TagCode::ImageReference),
        value("CompositionReference",pag::TagCode::CompositionReference),
        value("Transform2D",pag::TagCode::Transform2D),
        value("MaskBlock",pag::TagCode::MaskBlock),
        value("ShapeGroup",pag::TagCode::ShapeGroup),
        value("Rectangle",pag::TagCode::Rectangle),
        value("Ellipse",pag::TagCode::Ellipse),
        value("PolyStar",pag::TagCode::PolyStar),
        value("ShapePath",pag::TagCode::ShapePath),
        value("Fill",pag::TagCode::Fill),
        value("Stroke",pag::TagCode::Stroke),
        value("GradientFill",pag::TagCode::GradientFill),
        value("GradientStroke",pag::TagCode::GradientStroke),
        value("MergePaths",pag::TagCode::MergePaths),
        value("TrimPaths",pag::TagCode::TrimPaths),
        value("Repeater",pag::TagCode::Repeater),
        value("RoundCorners",pag::TagCode::RoundCorners),
        value("Performance",pag::TagCode::Performance),
        value("DropShadowStyle",pag::TagCode::DropShadowStyle),
        value("CachePolicy",pag::TagCode::CachePolicy),
        value("FileAttributes",pag::TagCode::FileAttributes),
        value("TimeStretchMode",pag::TagCode::TimeStretchMode),
        value("BitmapCompositionBlock",pag::TagCode::BitmapCompositionBlock),
        value("BitmapSequence",pag::TagCode::BitmapSequence),
        value("ImageBytes",pag::TagCode::ImageBytes),
        value("ImageBytesV2",pag::TagCode::ImageBytesV2),
        value("ImageBytesV3",pag::TagCode::ImageBytesV3),
        value("VideoCompositionBlock",pag::TagCode::VideoCompositionBlock),
        value("VideoSequence",pag::TagCode::VideoSequence),
        value("LayerAttributesV2",pag::TagCode::LayerAttributesV2),
        value("MarkerList",pag::TagCode::MarkerList),
        value("ImageFillRule",pag::TagCode::ImageFillRule),
        value("AudioBytes",pag::TagCode::AudioBytes),
        value("MotionTileEffect",pag::TagCode::MotionTileEffect),
        value("LevelsIndividualEffect",pag::TagCode::LevelsIndividualEffect),
        value("CornerPinEffect",pag::TagCode::CornerPinEffect),
        value("BulgeEffect",pag::TagCode::BulgeEffect),
        value("FastBlurEffect",pag::TagCode::FastBlurEffect),
        value("RadialBlurEffect",pag::TagCode::RadialBlurEffect),
        value("GlowEffect",pag::TagCode::GlowEffect),
        value("LayerAttributesV3",pag::TagCode::LayerAttributesV3),
        value("LayerAttributesExtra",pag::TagCode::LayerAttributesExtra),
        value("TextSourceV2",pag::TagCode::TextSourceV2),
        value("DropShadowStyleV2",pag::TagCode::DropShadowStyleV2),
        value("DisplacementMapEffect",pag::TagCode::DisplacementMapEffect),
        value("ImageFillRuleV2",pag::TagCode::ImageFillRuleV2),
        value("Count",pag::TagCode::Count)
    );





	registration::class_<pag::TimeRange>("pag::TimeRange")
        .property("start",&pag::TimeRange::start)
        .property("end",&pag::TimeRange::end)
        .method("duration",&pag::TimeRange::duration)
    ;
	





	registration::class_<pag::Ratio>("pag::Ratio")
        .property("numerator",&pag::Ratio::numerator)
        .property("denominator",&pag::Ratio::denominator)
        .method("value",&pag::Ratio::value)
    ;
	







	registration::class_<pag::Point>("pag::Point")
        .property("x",&pag::Point::x)
        .property("y",&pag::Point::y)
    ;


	registration::class_<pag::Point3D>("pag::Point3D")
	    .property("x",&pag::Point3D::x)
	    .property("y",&pag::Point3D::y)
	    .property("z",&pag::Point3D::z)
	    ;









	registration::class_<pag::Rect>("pag::Rect")
        .property("left",&pag::Rect::left)
        .property("top",&pag::Rect::top)
        .property("right",&pag::Rect::right)
        .property("bottom",&pag::Rect::bottom)
    ;
	







	registration::class_<pag::Color>("pag::Color")
        .property("red",&pag::Color::red)
        .property("green",&pag::Color::green)
        .property("blue",&pag::Color::blue)
    ;
	







	registration::class_<pag::ByteData>("pag::ByteData")
        .method("data",&pag::ByteData::data)
        .method("length",&pag::ByteData::length)
    ;
	



	registration::class_<pag::VideoFrame>("pag::VideoFrame")
        .property("isKeyframe",&pag::VideoFrame::isKeyframe)
        .property("frame",&pag::VideoFrame::frame)
        .property("fileBytes",&pag::VideoFrame::fileBytes)
    ;
	



	registration::class_<pag::Sequence>("pag::Sequence")
        .property("width",&pag::Sequence::width)
        .property("height",&pag::Sequence::height)
        .property("frameRate",&pag::Sequence::frameRate)
        .method("duration",&pag::Sequence::duration)
    ;
	



	registration::class_<pag::VideoSequence>("pag::VideoSequence")
        .property("alphaStartX",&pag::VideoSequence::alphaStartX)
        .property("alphaStartY",&pag::VideoSequence::alphaStartY)
        .property("frames",&pag::VideoSequence::frames)
        .property("headers",&pag::VideoSequence::headers)
        .property("staticTimeRanges",&pag::VideoSequence::staticTimeRanges)
        .method("duration",&pag::VideoSequence::duration)
    ;
	



	registration::class_<pag::BlendMode>("pag::BlendMode")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Normal"] = pag::BlendMode::Normal;
        _enum["Multiply"] = pag::BlendMode::Multiply;
        _enum["Screen"] = pag::BlendMode::Screen;
        _enum["Overlay"] = pag::BlendMode::Overlay;
        _enum["Darken"] = pag::BlendMode::Darken;
        _enum["Lighten"] = pag::BlendMode::Lighten;
        _enum["ColorDodge"] = pag::BlendMode::ColorDodge;
        _enum["ColorBurn"] = pag::BlendMode::ColorBurn;
        _enum["HardLight"] = pag::BlendMode::HardLight;
        _enum["SoftLight"] = pag::BlendMode::SoftLight;
        _enum["Difference"] = pag::BlendMode::Difference;
        _enum["Exclusion"] = pag::BlendMode::Exclusion;
        _enum["Hue"] = pag::BlendMode::Hue;
        _enum["Saturation"] = pag::BlendMode::Saturation;
        _enum["Color"] = pag::BlendMode::Color;
        _enum["Luminosity"] = pag::BlendMode::Luminosity;
        _enum["Add"] = pag::BlendMode::Add;
        PAG_Enums["pag::BlendMode"] = _enum;
    }


    registration::enumeration<pag::PathDataVerb>("pag::PathDataVerb")(
        value("MoveTo",pag::PathDataVerb::MoveTo),
        value("LineTo",pag::PathDataVerb::LineTo),
        value("CurveTo",pag::PathDataVerb::CurveTo),
        value("Close",pag::PathDataVerb::Close)
    );



	registration::class_<pag::PathData>("pag::PathData")
        .property("verbs",&pag::PathData::verbs)
        .property("points",&pag::PathData::points)
        .method("moveTo",&pag::PathData::moveTo)
        .method("lineTo",&pag::PathData::lineTo)
        .method("cubicTo",&pag::PathData::cubicTo)
        .method("close",&pag::PathData::close)
        .method("isClosed",&pag::PathData::isClosed)
        .method("reverse",&pag::PathData::reverse)
        .method("clear",&pag::PathData::clear)
        .method("interpolate",&pag::PathData::interpolate)
    ;




	registration::class_<pag::ParagraphJustification>("pag::ParagraphJustification")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["LeftJustify"] = pag::ParagraphJustification::LeftJustify;
        _enum["CenterJustify"] = pag::ParagraphJustification::CenterJustify;
        _enum["RightJustify"] = pag::ParagraphJustification::RightJustify;
        _enum["FullJustifyLastLineLeft"] = pag::ParagraphJustification::FullJustifyLastLineLeft;
        _enum["FullJustifyLastLineRight"] = pag::ParagraphJustification::FullJustifyLastLineRight;
        _enum["FullJustifyLastLineCenter"] = pag::ParagraphJustification::FullJustifyLastLineCenter;
        _enum["FullJustifyLastLineFull"] = pag::ParagraphJustification::FullJustifyLastLineFull;
        PAG_Enums["pag::ParagraphJustification"] = _enum;
    }


  registration::class_<pag::TextDirection>("pag::TextDirection")
    ;
  {
        std::map<std::string,pag::Enum> _enum;
        _enum["Default"] = pag::TextDirection::Default;
        _enum["Horizontal"] = pag::TextDirection::Horizontal;
        _enum["Vertical"] = pag::TextDirection::Vertical;
        PAG_Enums["pag::TextDirection"] = _enum;
  }

	registration::class_<pag::TextDocument>("pag::TextDocument")
        .property("applyFill",&pag::TextDocument::applyFill)
        .property("applyStroke",&pag::TextDocument::applyStroke)
        .property("baselineShift",&pag::TextDocument::baselineShift)
        .property("boxText",&pag::TextDocument::boxText)
        .property("boxTextPos",&pag::TextDocument::boxTextPos)
        .property("boxTextSize",&pag::TextDocument::boxTextSize)
        .property("firstBaseLine",&pag::TextDocument::firstBaseLine)
        .property("fauxBold",&pag::TextDocument::fauxBold)
        .property("fauxItalic",&pag::TextDocument::fauxItalic)
        .property("fillColor",&pag::TextDocument::fillColor)
        .property("fontFamily",&pag::TextDocument::fontFamily)
        .property("fontStyle",&pag::TextDocument::fontStyle)
        .property("fontSize",&pag::TextDocument::fontSize)
        .property("strokeColor",&pag::TextDocument::strokeColor)
        .property("strokeOverFill",&pag::TextDocument::strokeOverFill)
        .property("strokeWidth",&pag::TextDocument::strokeWidth)
        .property("text",&pag::TextDocument::text)
        .property("justification",&pag::TextDocument::justification)
        .property("leading",&pag::TextDocument::leading)
        .property("tracking",&pag::TextDocument::tracking)
        .property("direction",&pag::TextDocument::direction)
        .property("backgroundColor",&pag::TextDocument::backgroundColor)
        .property("backgroundAlpha",&pag::TextDocument::backgroundAlpha)
    ;
	

    REG_PAG_PROPERTY(float,"pag::Property<float>","pag::AnimatableProperty<float>","pag::Keyframe<float>")
    REG_PAG_PROPERTY(pag::Point,"pag::Property<pag::Point>","pag::AnimatableProperty<pag::Point>","pag::Keyframe<pag::Point>")
    REG_PAG_PROPERTY(pag::Point3D,"pag::Property<pag::Point3D>","pag::AnimatableProperty<pag::Point3D>","pag::Keyframe<pag::Point3D>")
    REG_PAG_PROPERTY(pag::Opacity,"pag::Property<pag::Opacity>","pag::AnimatableProperty<pag::Opacity>","pag::Keyframe<pag::Opacity>")
    REG_PAG_PROPERTY(pag::PathHandle,"pag::Property<pag::PathHandle>","pag::AnimatableProperty<pag::PathHandle>","pag::Keyframe<pag::PathHandle>")
    REG_PAG_PROPERTY(pag::Enum,"pag::Property<pag::Enum>","pag::AnimatableProperty<pag::Enum>","pag::Keyframe<pag::Enum>")
    REG_PAG_PROPERTY(pag::Color,"pag::Property<pag::Color>","pag::AnimatableProperty<pag::Color>","pag::Keyframe<pag::Color>")
    REG_PAG_PROPERTY(pag::Percent,"pag::Property<pag::Percent>","pag::AnimatableProperty<pag::Percent>","pag::Keyframe<pag::Percent>")
    REG_PAG_PROPERTY(pag::GradientColorHandle,"pag::Property<pag::GradientColorHandle>","pag::AnimatableProperty<pag::GradientColorHandle>","pag::Keyframe<pag::GradientColorHandle>")
    REG_PAG_PROPERTY(pag::TextDocumentHandle,"pag::Property<pag::TextDocumentHandle>","pag::AnimatableProperty<pag::TextDocumentHandle>","pag::Keyframe<pag::TextDocumentHandle>")
    REG_PAG_PROPERTY(pag::Frame,"pag::Property<pag::Frame>","pag::AnimatableProperty<pag::Frame>","pag::Keyframe<pag::Frame>")	


	registration::class_<pag::KeyframeInterpolationType>("pag::KeyframeInterpolationType")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["None"] = pag::KeyframeInterpolationType::None;
        _enum["Linear"] = pag::KeyframeInterpolationType::Linear;
        _enum["Bezier"] = pag::KeyframeInterpolationType::Bezier;
        _enum["Hold"] = pag::KeyframeInterpolationType::Hold;
        PAG_Enums["pag::KeyframeInterpolationType"] = _enum;
    }













	registration::class_<pag::Transform2D>("pag::Transform2D")
        .property("anchorPoint",&pag::Transform2D::anchorPoint)
        .property("position",&pag::Transform2D::position)
        .property("xPosition",&pag::Transform2D::xPosition)
        .property("yPosition",&pag::Transform2D::yPosition)
        .property("scale",&pag::Transform2D::scale)
        .property("rotation",&pag::Transform2D::rotation)
        .property("opacity",&pag::Transform2D::opacity)
        .method("excludeVaryingRanges",&pag::Transform2D::excludeVaryingRanges)
        .method("verify",&pag::Transform2D::verify)
    ;

  registration::class_<pag::Transform3D>("pag::Transform3D")
      .property("anchorPoint",&pag::Transform3D::anchorPoint)
      .property("position",&pag::Transform3D::position)
      .property("xPosition",&pag::Transform3D::xPosition)
      .property("yPosition",&pag::Transform3D::yPosition)
      .property("zPosition",&pag::Transform3D::zPosition)
      .property("scale",&pag::Transform3D::scale)
      .property("orientation",&pag::Transform3D::orientation)
      .property("xRotation",&pag::Transform3D::xRotation)
      .property("yRotation",&pag::Transform3D::yRotation)
      .property("zRotation",&pag::Transform3D::zRotation)
      .property("opacity",&pag::Transform3D::opacity)
      .method("excludeVaryingRanges",&pag::Transform3D::excludeVaryingRanges)
      .method("verify",&pag::Transform3D::verify)
      ;


	registration::class_<pag::MaskMode>("pag::MaskMode")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["None"] = pag::MaskMode::None;
        _enum["Add"] = pag::MaskMode::Add;
        _enum["Subtract"] = pag::MaskMode::Subtract;
        _enum["Intersect"] = pag::MaskMode::Intersect;
        _enum["Lighten"] = pag::MaskMode::Lighten;
        _enum["Darken"] = pag::MaskMode::Darken;
        _enum["Difference"] = pag::MaskMode::Difference;
        _enum["Accum"] = pag::MaskMode::Accum;
        PAG_Enums["pag::MaskMode"] = _enum;
    }



	registration::class_<pag::MaskData>("pag::MaskData")
        .property("id",&pag::MaskData::id)
        .property("inverted",&pag::MaskData::inverted)
        .property("maskMode",&pag::MaskData::maskMode)
        .property("maskPath",&pag::MaskData::maskPath)
        .property("maskOpacity",&pag::MaskData::maskOpacity)
        .property("maskExpansion",&pag::MaskData::maskExpansion)
        .method("excludeVaryingRanges",&pag::MaskData::excludeVaryingRanges)
        .method("verify",&pag::MaskData::verify)
    ;
	



	registration::class_<pag::Marker>("pag::Marker")
        .property("startTime",&pag::Marker::startTime)
        .property("duration",&pag::Marker::duration)
        .property("comment",&pag::Marker::comment)
    ;
	


    registration::enumeration<pag::EffectType>("pag::EffectType")(
        value("Unknown",pag::EffectType::Unknown),
        value("Fill",pag::EffectType::Fill),
        value("MotionTile",pag::EffectType::MotionTile),
        value("LevelsIndividual",pag::EffectType::LevelsIndividual),
        value("CornerPin",pag::EffectType::CornerPin),
        value("Bulge",pag::EffectType::Bulge),
        value("FastBlur",pag::EffectType::FastBlur),
        value("Glow",pag::EffectType::Glow),
        value("DisplacementMap",pag::EffectType::DisplacementMap),
        value("RadialBlur",pag::EffectType::RadialBlur)
    );



	registration::class_<pag::Effect>("pag::Effect")
        .property("uniqueID",&pag::Effect::uniqueID)
        .property("effectOpacity",&pag::Effect::effectOpacity)
        .property("maskReferences",&pag::Effect::maskReferences)
        .method("type",&pag::Effect::type)
        .method("processVisibleAreaOnly",&pag::Effect::processVisibleAreaOnly)
        .method("visibleAt",&pag::Effect::visibleAt)
        .method("transformBounds",&pag::Effect::transformBounds)
        .method("excludeVaryingRanges",&pag::Effect::excludeVaryingRanges)
        .method("verify",&pag::Effect::verify)
    ;
	



	registration::class_<pag::MotionTileEffect>("pag::MotionTileEffect")
        .property("tileCenter",&pag::MotionTileEffect::tileCenter)
        .property("tileWidth",&pag::MotionTileEffect::tileWidth)
        .property("tileHeight",&pag::MotionTileEffect::tileHeight)
        .property("outputWidth",&pag::MotionTileEffect::outputWidth)
        .property("outputHeight",&pag::MotionTileEffect::outputHeight)
        .property("mirrorEdges",&pag::MotionTileEffect::mirrorEdges)
        .property("phase",&pag::MotionTileEffect::phase)
        .property("horizontalPhaseShift",&pag::MotionTileEffect::horizontalPhaseShift)
        .method("type",&pag::MotionTileEffect::type)
        .method("visibleAt",&pag::MotionTileEffect::visibleAt)
        .method("transformBounds",&pag::MotionTileEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::MotionTileEffect::excludeVaryingRanges)
        .method("verify",&pag::MotionTileEffect::verify)
    ;
	



	registration::class_<pag::LevelsIndividualEffect>("pag::LevelsIndividualEffect")
        .property("inputBlack",&pag::LevelsIndividualEffect::inputBlack)
        .property("inputWhite",&pag::LevelsIndividualEffect::inputWhite)
        .property("gamma",&pag::LevelsIndividualEffect::gamma)
        .property("outputBlack",&pag::LevelsIndividualEffect::outputBlack)
        .property("outputWhite",&pag::LevelsIndividualEffect::outputWhite)
        .property("redInputBlack",&pag::LevelsIndividualEffect::redInputBlack)
        .property("redInputWhite",&pag::LevelsIndividualEffect::redInputWhite)
        .property("redGamma",&pag::LevelsIndividualEffect::redGamma)
        .property("redOutputBlack",&pag::LevelsIndividualEffect::redOutputBlack)
        .property("redOutputWhite",&pag::LevelsIndividualEffect::redOutputWhite)
        .property("greenInputBlack",&pag::LevelsIndividualEffect::greenInputBlack)
        .property("greenInputWhite",&pag::LevelsIndividualEffect::greenInputWhite)
        .property("greenGamma",&pag::LevelsIndividualEffect::greenGamma)
        .property("greenOutputBlack",&pag::LevelsIndividualEffect::greenOutputBlack)
        .property("greenOutputWhite",&pag::LevelsIndividualEffect::greenOutputWhite)
        .property("blueInputBlack",&pag::LevelsIndividualEffect::blueInputBlack)
        .property("blueInputWhite",&pag::LevelsIndividualEffect::blueInputWhite)
        .property("blueGamma",&pag::LevelsIndividualEffect::blueGamma)
        .property("blueOutputBlack",&pag::LevelsIndividualEffect::blueOutputBlack)
        .property("blueOutputWhite",&pag::LevelsIndividualEffect::blueOutputWhite)
        .method("type",&pag::LevelsIndividualEffect::type)
        .method("processVisibleAreaOnly",&pag::LevelsIndividualEffect::processVisibleAreaOnly)
        .method("visibleAt",&pag::LevelsIndividualEffect::visibleAt)
        .method("transformBounds",&pag::LevelsIndividualEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::LevelsIndividualEffect::excludeVaryingRanges)
        .method("verify",&pag::LevelsIndividualEffect::verify)
    ;
	



	registration::class_<pag::CornerPinEffect>("pag::CornerPinEffect")
        .property("upperLeft",&pag::CornerPinEffect::upperLeft)
        .property("upperRight",&pag::CornerPinEffect::upperRight)
        .property("lowerLeft",&pag::CornerPinEffect::lowerLeft)
        .property("lowerRight",&pag::CornerPinEffect::lowerRight)
        .method("type",&pag::CornerPinEffect::type)
        .method("visibleAt",&pag::CornerPinEffect::visibleAt)
        .method("transformBounds",&pag::CornerPinEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::CornerPinEffect::excludeVaryingRanges)
        .method("verify",&pag::CornerPinEffect::verify)
    ;
	



	registration::class_<pag::BulgeEffect>("pag::BulgeEffect")
        .property("horizontalRadius",&pag::BulgeEffect::horizontalRadius)
        .property("verticalRadius",&pag::BulgeEffect::verticalRadius)
        .property("bulgeCenter",&pag::BulgeEffect::bulgeCenter)
        .property("bulgeHeight",&pag::BulgeEffect::bulgeHeight)
        .property("taperRadius",&pag::BulgeEffect::taperRadius)
        .property("pinning",&pag::BulgeEffect::pinning)
        .method("type",&pag::BulgeEffect::type)
        .method("visibleAt",&pag::BulgeEffect::visibleAt)
        .method("transformBounds",&pag::BulgeEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::BulgeEffect::excludeVaryingRanges)
        .method("verify",&pag::BulgeEffect::verify)
    ;
	



	registration::class_<pag::BlurDimensionsDirection>("pag::BlurDimensionsDirection")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["All"] = pag::BlurDimensionsDirection::All;
        _enum["Horizontal"] = pag::BlurDimensionsDirection::Horizontal;
        _enum["Vertical"] = pag::BlurDimensionsDirection::Vertical;
        PAG_Enums["pag::BlurDimensionsDirection"] = _enum;
    }

  registration::class_<pag::RadialBlurMode>("pag::RadialBlurMode")
      ;
  {
    std::map<std::string,pag::Enum> _enum;
    _enum["Spin"] = pag::RadialBlurMode::Spin;
    _enum["Zoom"] = pag::RadialBlurMode::Zoom;
    PAG_Enums["pag::RadialBlurMode"] = _enum;
  }

  registration::class_<pag::RadialBlurAntialias>("pag::RadialBlurAntialias")
      ;
  {
    std::map<std::string,pag::Enum> _enum;
    _enum["Low"] = pag::RadialBlurAntialias::Low;
    _enum["High"] = pag::RadialBlurAntialias::High;
    PAG_Enums["pag::RadialBlurAntialias"] = _enum;
  }

	registration::class_<pag::FastBlurEffect>("pag::FastBlurEffect")
        .property("blurriness",&pag::FastBlurEffect::blurriness)
        .property("blurDimensions",&pag::FastBlurEffect::blurDimensions)
        .property("repeatEdgePixels",&pag::FastBlurEffect::repeatEdgePixels)
        .method("type",&pag::FastBlurEffect::type)
        .method("processVisibleAreaOnly",&pag::FastBlurEffect::processVisibleAreaOnly)
        .method("visibleAt",&pag::FastBlurEffect::visibleAt)
        .method("transformBounds",&pag::FastBlurEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::FastBlurEffect::excludeVaryingRanges)
        .method("verify",&pag::FastBlurEffect::verify)
    ;


  registration::class_<pag::RadialBlurEffect>("pag::RadialBlurEffect")
      .property("amount",&pag::RadialBlurEffect::amount)
      .property("center",&pag::RadialBlurEffect::center)
      .property("mode",&pag::RadialBlurEffect::mode)
      .property("antialias",&pag::RadialBlurEffect::antialias)
      .method("type",&pag::RadialBlurEffect::type)
      .method("processVisibleAreaOnly",&pag::RadialBlurEffect::processVisibleAreaOnly)
      .method("visibleAt",&pag::RadialBlurEffect::visibleAt)
      .method("transformBounds",&pag::RadialBlurEffect::transformBounds)
      .method("excludeVaryingRanges",&pag::RadialBlurEffect::excludeVaryingRanges)
      .method("verify",&pag::RadialBlurEffect::verify)
      ;


	registration::class_<pag::GlowEffect>("pag::GlowEffect")
        .property("glowThreshold",&pag::GlowEffect::glowThreshold)
        .property("glowRadius",&pag::GlowEffect::glowRadius)
        .property("glowIntensity",&pag::GlowEffect::glowIntensity)
        .method("type",&pag::GlowEffect::type)
        .method("processVisibleAreaOnly",&pag::GlowEffect::processVisibleAreaOnly)
        .method("visibleAt",&pag::GlowEffect::visibleAt)
        .method("transformBounds",&pag::GlowEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::GlowEffect::excludeVaryingRanges)
        .method("verify",&pag::GlowEffect::verify)
    ;
	



	registration::class_<pag::DisplacementMapSource>("pag::DisplacementMapSource")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Red"] = pag::DisplacementMapSource::Red;
        _enum["Green"] = pag::DisplacementMapSource::Green;
        _enum["Blue"] = pag::DisplacementMapSource::Blue;
        _enum["Alpha"] = pag::DisplacementMapSource::Alpha;
        _enum["Luminance"] = pag::DisplacementMapSource::Luminance;
        _enum["Hue"] = pag::DisplacementMapSource::Hue;
        _enum["Lightness"] = pag::DisplacementMapSource::Lightness;
        _enum["Saturation"] = pag::DisplacementMapSource::Saturation;
        _enum["Full"] = pag::DisplacementMapSource::Full;
        _enum["Half"] = pag::DisplacementMapSource::Half;
        _enum["Off"] = pag::DisplacementMapSource::Off;
        PAG_Enums["pag::DisplacementMapSource"] = _enum;
    }



	registration::class_<pag::DisplacementMapBehavior>("pag::DisplacementMapBehavior")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["CenterMap"] = pag::DisplacementMapBehavior::CenterMap;
        _enum["StretchMapToFit"] = pag::DisplacementMapBehavior::StretchMapToFit;
        _enum["TileMap"] = pag::DisplacementMapBehavior::TileMap;
        PAG_Enums["pag::DisplacementMapBehavior"] = _enum;
    }



	registration::class_<pag::Layer>("pag::Layer")
    ;
	



	registration::class_<pag::DisplacementMapEffect>("pag::DisplacementMapEffect")
        // todo: add tree node after user action
        // .property("displacementMapLayer",&pag::DisplacementMapEffect::displacementMapLayer)
        .property("useForHorizontalDisplacement",&pag::DisplacementMapEffect::useForHorizontalDisplacement)
        .property("maxHorizontalDisplacement",&pag::DisplacementMapEffect::maxHorizontalDisplacement)
        .property("useForVerticalDisplacement",&pag::DisplacementMapEffect::useForVerticalDisplacement)
        .property("maxVerticalDisplacement",&pag::DisplacementMapEffect::maxVerticalDisplacement)
        .property("displacementMapBehavior",&pag::DisplacementMapEffect::displacementMapBehavior)
        .property("edgeBehavior",&pag::DisplacementMapEffect::edgeBehavior)
        .property("expandOutput",&pag::DisplacementMapEffect::expandOutput)
        .method("type",&pag::DisplacementMapEffect::type)
        .method("processVisibleAreaOnly",&pag::DisplacementMapEffect::processVisibleAreaOnly)
        .method("transformBounds",&pag::DisplacementMapEffect::transformBounds)
        .method("excludeVaryingRanges",&pag::DisplacementMapEffect::excludeVaryingRanges)
        .method("verify",&pag::DisplacementMapEffect::verify)
    ;

	registration::class_<pag::BrightnessContrastEffect>("pag::BrightnessContrastEffect")
	    .property("brightness",&pag::BrightnessContrastEffect::brightness)
	    .property("contrast",&pag::BrightnessContrastEffect::contrast)
	    .property("useOldVersion",&pag::BrightnessContrastEffect::useOldVersion)
	    .method("type",&pag::BrightnessContrastEffect::type)
	    .method("visibleAt",&pag::BrightnessContrastEffect::visibleAt)
	    .method("transformBounds",&pag::BrightnessContrastEffect::transformBounds)
	    .method("excludeVaryingRanges",&pag::BrightnessContrastEffect::excludeVaryingRanges)
	    .method("verify",&pag::BrightnessContrastEffect::verify)
	    ;

	registration::class_<pag::HueSaturationEffect>("pag::HueSaturationEffect")
	    .property("channelControl",&pag::HueSaturationEffect::channelControl)
	    .property("hue",&pag::HueSaturationEffect::hue)
	    .property("saturation",&pag::HueSaturationEffect::saturation)
	    .property("lightness",&pag::HueSaturationEffect::lightness)
	    .property("colorize",&pag::HueSaturationEffect::colorize)
	    .property("colorizeHue",&pag::HueSaturationEffect::colorizeHue)
	    .property("colorizeSaturation",&pag::HueSaturationEffect::colorizeSaturation)
	    .property("colorizeLightness",&pag::HueSaturationEffect::colorizeLightness)
	    .method("type",&pag::HueSaturationEffect::type)
	    .method("visibleAt",&pag::HueSaturationEffect::visibleAt)
	    .method("transformBounds",&pag::HueSaturationEffect::transformBounds)
	    .method("excludeVaryingRanges",&pag::HueSaturationEffect::excludeVaryingRanges)
	    .method("verify",&pag::HueSaturationEffect::verify)
	    ;

    registration::enumeration<pag::LayerStyleType>("pag::LayerStyleType")(
        value("Unknown",pag::LayerStyleType::Unknown),
        value("DropShadow",pag::LayerStyleType::DropShadow),
        value("Stroke",pag::LayerStyleType::Stroke)
    );


    registration::enumeration<pag::LayerStylePosition>("pag::LayerStylePosition")(
        value("Above",pag::LayerStylePosition::Above),
        value("Blow",pag::LayerStylePosition::Blow)
    );



	registration::class_<pag::LayerStyle>("pag::LayerStyle")
        .property("uniqueID",&pag::LayerStyle::uniqueID)
        .method("type",&pag::LayerStyle::type)
        .method("drawPosition",&pag::LayerStyle::drawPosition)
        .method("visibleAt",&pag::LayerStyle::visibleAt)
        .method("transformBounds",&pag::LayerStyle::transformBounds)
        .method("excludeVaryingRanges",&pag::LayerStyle::excludeVaryingRanges)
        .method("verify",&pag::LayerStyle::verify)
    ;
	



	registration::class_<pag::StrokePosition>("pag::StrokePosition")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Outside"] = pag::StrokePosition::Outside;
        _enum["Inside"] = pag::StrokePosition::Inside;
        _enum["Center"] = pag::StrokePosition::Center;
        PAG_Enums["pag::StrokePosition"] = _enum;
    }



	registration::class_<pag::DropShadowStyle>("pag::DropShadowStyle")
        .property("blendMode",&pag::DropShadowStyle::blendMode)
        .property("color",&pag::DropShadowStyle::color)
        .property("opacity",&pag::DropShadowStyle::opacity)
        .property("angle",&pag::DropShadowStyle::angle)
        .property("distance",&pag::DropShadowStyle::distance)
        .property("size",&pag::DropShadowStyle::size)
        .property("spread",&pag::DropShadowStyle::spread)
        .method("type",&pag::DropShadowStyle::type)
        .method("drawPosition",&pag::DropShadowStyle::drawPosition)
        .method("visibleAt",&pag::DropShadowStyle::visibleAt)
        .method("transformBounds",&pag::DropShadowStyle::transformBounds)
        .method("excludeVaryingRanges",&pag::DropShadowStyle::excludeVaryingRanges)
        .method("verify",&pag::DropShadowStyle::verify)
    ;
	



	registration::class_<pag::StrokeStyle>("pag::StrokeStyle")
        .property("blendMode",&pag::StrokeStyle::blendMode)
        .property("color",&pag::StrokeStyle::color)
        .property("size",&pag::StrokeStyle::size)
        .property("opacity",&pag::StrokeStyle::opacity)
        .property("position",&pag::StrokeStyle::position)
        .method("type",&pag::StrokeStyle::type)
        .method("drawPosition",&pag::StrokeStyle::drawPosition)
        .method("visibleAt",&pag::StrokeStyle::visibleAt)
        .method("transformBounds",&pag::StrokeStyle::transformBounds)
        .method("excludeVaryingRanges",&pag::StrokeStyle::excludeVaryingRanges)
        .method("verify",&pag::StrokeStyle::verify)
    ;
	



	registration::class_<pag::TextPathOptions>("pag::TextPathOptions")
        .property("path",&pag::TextPathOptions::path)
        .property("reversedPath",&pag::TextPathOptions::reversedPath)
        .property("perpendicularToPath",&pag::TextPathOptions::perpendicularToPath)
        .property("forceAlignment",&pag::TextPathOptions::forceAlignment)
        .property("firstMargin",&pag::TextPathOptions::firstMargin)
        .property("lastMargin",&pag::TextPathOptions::lastMargin)
        .method("excludeVaryingRanges",&pag::TextPathOptions::excludeVaryingRanges)
        .method("verify",&pag::TextPathOptions::verify)
    ;
	



	registration::class_<pag::AnchorPointGrouping>("pag::AnchorPointGrouping")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Character"] = pag::AnchorPointGrouping::Character;
        _enum["Word"] = pag::AnchorPointGrouping::Word;
        _enum["Line"] = pag::AnchorPointGrouping::Line;
        _enum["All"] = pag::AnchorPointGrouping::All;
        PAG_Enums["pag::AnchorPointGrouping"] = _enum;
    }



	registration::class_<pag::TextMoreOptions>("pag::TextMoreOptions")
        .property("anchorPointGrouping",&pag::TextMoreOptions::anchorPointGrouping)
        .property("groupingAlignment",&pag::TextMoreOptions::groupingAlignment)
        .method("excludeVaryingRanges",&pag::TextMoreOptions::excludeVaryingRanges)
        .method("verify",&pag::TextMoreOptions::verify)
    ;
	



	registration::class_<pag::LineCap>("pag::LineCap")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Butt"] = pag::LineCap::Butt;
        _enum["Round"] = pag::LineCap::Round;
        _enum["Square"] = pag::LineCap::Square;
        PAG_Enums["pag::LineCap"] = _enum;
    }



	registration::class_<pag::LineJoin>("pag::LineJoin")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Miter"] = pag::LineJoin::Miter;
        _enum["Round"] = pag::LineJoin::Round;
        _enum["Bevel"] = pag::LineJoin::Bevel;
        PAG_Enums["pag::LineJoin"] = _enum;
    }



	registration::class_<pag::FillRule>("pag::FillRule")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["NonZeroWinding"] = pag::FillRule::NonZeroWinding;
        _enum["EvenOdd"] = pag::FillRule::EvenOdd;
        PAG_Enums["pag::FillRule"] = _enum;
    }



	registration::class_<pag::GradientFillType>("pag::GradientFillType")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Linear"] = pag::GradientFillType::Linear;
        _enum["Radial"] = pag::GradientFillType::Radial;
        PAG_Enums["pag::GradientFillType"] = _enum;
    }



	registration::class_<pag::ShapeTransform>("pag::ShapeTransform")
        .property("anchorPoint",&pag::ShapeTransform::anchorPoint)
        .property("position",&pag::ShapeTransform::position)
        .property("scale",&pag::ShapeTransform::scale)
        .property("skew",&pag::ShapeTransform::skew)
        .property("skewAxis",&pag::ShapeTransform::skewAxis)
        .property("rotation",&pag::ShapeTransform::rotation)
        .property("opacity",&pag::ShapeTransform::opacity)
        .method("excludeVaryingRanges",&pag::ShapeTransform::excludeVaryingRanges)
        .method("verify",&pag::ShapeTransform::verify)
    ;
	


    registration::enumeration<pag::ShapeType>("pag::ShapeType")(
        value("Unknown",pag::ShapeType::Unknown),
        value("ShapeGroup",pag::ShapeType::ShapeGroup),
        value("Rectangle",pag::ShapeType::Rectangle),
        value("Ellipse",pag::ShapeType::Ellipse),
        value("PolyStar",pag::ShapeType::PolyStar),
        value("ShapePath",pag::ShapeType::ShapePath),
        value("Fill",pag::ShapeType::Fill),
        value("Stroke",pag::ShapeType::Stroke),
        value("GradientFill",pag::ShapeType::GradientFill),
        value("GradientStroke",pag::ShapeType::GradientStroke),
        value("MergePaths",pag::ShapeType::MergePaths),
        value("TrimPaths",pag::ShapeType::TrimPaths),
        value("Repeater",pag::ShapeType::Repeater),
        value("RoundCorners",pag::ShapeType::RoundCorners)
    );



	registration::class_<pag::ShapeElement>("pag::ShapeElement")
        .method("type",&pag::ShapeElement::type)
        .method("excludeVaryingRanges",&pag::ShapeElement::excludeVaryingRanges)
        .method("verify",&pag::ShapeElement::verify)
    ;
	



	registration::class_<pag::ShapeGroupElement>("pag::ShapeGroupElement")
        .property("blendMode",&pag::ShapeGroupElement::blendMode)
        .property("transform",&pag::ShapeGroupElement::transform)
        .property("elements",&pag::ShapeGroupElement::elements)
        .method("type",&pag::ShapeGroupElement::type)
        .method("excludeVaryingRanges",&pag::ShapeGroupElement::excludeVaryingRanges)
        .method("verify",&pag::ShapeGroupElement::verify)
    ;
	



	registration::class_<pag::RectangleElement>("pag::RectangleElement")
        .property("reversed",&pag::RectangleElement::reversed)
        .property("size",&pag::RectangleElement::size)
        .property("position",&pag::RectangleElement::position)
        .property("roundness",&pag::RectangleElement::roundness)
        .method("type",&pag::RectangleElement::type)
        .method("excludeVaryingRanges",&pag::RectangleElement::excludeVaryingRanges)
        .method("verify",&pag::RectangleElement::verify)
    ;
	



	registration::class_<pag::EllipseElement>("pag::EllipseElement")
        .property("reversed",&pag::EllipseElement::reversed)
        .property("size",&pag::EllipseElement::size)
        .property("position",&pag::EllipseElement::position)
        .method("type",&pag::EllipseElement::type)
        .method("excludeVaryingRanges",&pag::EllipseElement::excludeVaryingRanges)
        .method("verify",&pag::EllipseElement::verify)
    ;
	



	registration::class_<pag::PolyStarType>("pag::PolyStarType")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Star"] = pag::PolyStarType::Star;
        _enum["Polygon"] = pag::PolyStarType::Polygon;
        PAG_Enums["pag::PolyStarType"] = _enum;
    }



	registration::class_<pag::PolyStarElement>("pag::PolyStarElement")
        .property("reversed",&pag::PolyStarElement::reversed)
        .property("polyType",&pag::PolyStarElement::polyType)
        .property("points",&pag::PolyStarElement::points)
        .property("position",&pag::PolyStarElement::position)
        .property("rotation",&pag::PolyStarElement::rotation)
        .property("innerRadius",&pag::PolyStarElement::innerRadius)
        .property("outerRadius",&pag::PolyStarElement::outerRadius)
        .property("innerRoundness",&pag::PolyStarElement::innerRoundness)
        .property("outerRoundness",&pag::PolyStarElement::outerRoundness)
        .method("type",&pag::PolyStarElement::type)
        .method("excludeVaryingRanges",&pag::PolyStarElement::excludeVaryingRanges)
        .method("verify",&pag::PolyStarElement::verify)
    ;
	



	registration::class_<pag::ShapePathElement>("pag::ShapePathElement")
        .property("shapePath",&pag::ShapePathElement::shapePath)
        .method("type",&pag::ShapePathElement::type)
        .method("excludeVaryingRanges",&pag::ShapePathElement::excludeVaryingRanges)
        .method("verify",&pag::ShapePathElement::verify)
    ;
	



	registration::class_<pag::CompositeOrder>("pag::CompositeOrder")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["BelowPreviousInSameGroup"] = pag::CompositeOrder::BelowPreviousInSameGroup;
        _enum["AbovePreviousInSameGroup"] = pag::CompositeOrder::AbovePreviousInSameGroup;
        PAG_Enums["pag::CompositeOrder"] = _enum;
    }



	registration::class_<pag::FillElement>("pag::FillElement")
        .property("blendMode",&pag::FillElement::blendMode)
        .property("composite",&pag::FillElement::composite)
        .property("fillRule",&pag::FillElement::fillRule)
        .property("color",&pag::FillElement::color)
        .property("opacity",&pag::FillElement::opacity)
        .method("type",&pag::FillElement::type)
        .method("excludeVaryingRanges",&pag::FillElement::excludeVaryingRanges)
        .method("verify",&pag::FillElement::verify)
    ;
	



	registration::class_<pag::StrokeElement>("pag::StrokeElement")
        .property("blendMode",&pag::StrokeElement::blendMode)
        .property("composite",&pag::StrokeElement::composite)
        .property("color",&pag::StrokeElement::color)
        .property("opacity",&pag::StrokeElement::opacity)
        .property("strokeWidth",&pag::StrokeElement::strokeWidth)
        .property("lineCap",&pag::StrokeElement::lineCap)
        .property("lineJoin",&pag::StrokeElement::lineJoin)
        .property("miterLimit",&pag::StrokeElement::miterLimit)
        .property("dashOffset",&pag::StrokeElement::dashOffset)
        .property("dashes",&pag::StrokeElement::dashes)
        .method("type",&pag::StrokeElement::type)
        .method("excludeVaryingRanges",&pag::StrokeElement::excludeVaryingRanges)
        .method("verify",&pag::StrokeElement::verify)
    ;
	



	registration::class_<pag::AlphaStop>("pag::AlphaStop")
        .property("position",&pag::AlphaStop::position)
        .property("midpoint",&pag::AlphaStop::midpoint)
        .property("opacity",&pag::AlphaStop::opacity)
    ;
	



	registration::class_<pag::ColorStop>("pag::ColorStop")
        .property("position",&pag::ColorStop::position)
        .property("midpoint",&pag::ColorStop::midpoint)
        .property("color",&pag::ColorStop::color)
    ;
	



	registration::class_<pag::GradientColor>("pag::GradientColor")
        .property("alphaStops",&pag::GradientColor::alphaStops)
        .property("colorStops",&pag::GradientColor::colorStops)
        .method("interpolate",&pag::GradientColor::interpolate)
    ;
	



	registration::class_<pag::GradientFillElement>("pag::GradientFillElement")
        .property("blendMode",&pag::GradientFillElement::blendMode)
        .property("composite",&pag::GradientFillElement::composite)
        .property("fillRule",&pag::GradientFillElement::fillRule)
        .property("fillType",&pag::GradientFillElement::fillType)
        .property("opacity",&pag::GradientFillElement::opacity)
        .property("startPoint",&pag::GradientFillElement::startPoint)
        .property("endPoint",&pag::GradientFillElement::endPoint)
        .property("colors",&pag::GradientFillElement::colors)
        .method("type",&pag::GradientFillElement::type)
        .method("excludeVaryingRanges",&pag::GradientFillElement::excludeVaryingRanges)
        .method("verify",&pag::GradientFillElement::verify)
    ;
	



	registration::class_<pag::GradientStrokeElement>("pag::GradientStrokeElement")
        .property("blendMode",&pag::GradientStrokeElement::blendMode)
        .property("composite",&pag::GradientStrokeElement::composite)
        .property("fillType",&pag::GradientStrokeElement::fillType)
        .property("lineCap",&pag::GradientStrokeElement::lineCap)
        .property("lineJoin",&pag::GradientStrokeElement::lineJoin)
        .property("miterLimit",&pag::GradientStrokeElement::miterLimit)
        .property("startPoint",&pag::GradientStrokeElement::startPoint)
        .property("endPoint",&pag::GradientStrokeElement::endPoint)
        .property("colors",&pag::GradientStrokeElement::colors)
        .property("opacity",&pag::GradientStrokeElement::opacity)
        .property("strokeWidth",&pag::GradientStrokeElement::strokeWidth)
        .property("dashOffset",&pag::GradientStrokeElement::dashOffset)
        .property("dashes",&pag::GradientStrokeElement::dashes)
        .method("type",&pag::GradientStrokeElement::type)
        .method("excludeVaryingRanges",&pag::GradientStrokeElement::excludeVaryingRanges)
        .method("verify",&pag::GradientStrokeElement::verify)
    ;
	



	registration::class_<pag::MergePathsMode>("pag::MergePathsMode")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Merge"] = pag::MergePathsMode::Merge;
        _enum["Add"] = pag::MergePathsMode::Add;
        _enum["Subtract"] = pag::MergePathsMode::Subtract;
        _enum["Intersect"] = pag::MergePathsMode::Intersect;
        _enum["ExcludeIntersections"] = pag::MergePathsMode::ExcludeIntersections;
        PAG_Enums["pag::MergePathsMode"] = _enum;
    }



	registration::class_<pag::MergePathsElement>("pag::MergePathsElement")
        .property("mode",&pag::MergePathsElement::mode)
        .method("type",&pag::MergePathsElement::type)
    ;
	



	registration::class_<pag::TrimPathsType>("pag::TrimPathsType")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Simultaneously"] = pag::TrimPathsType::Simultaneously;
        _enum["Individually"] = pag::TrimPathsType::Individually;
        PAG_Enums["pag::TrimPathsType"] = _enum;
    }



	registration::class_<pag::TrimPathsElement>("pag::TrimPathsElement")
        .property("start",&pag::TrimPathsElement::start)
        .property("end",&pag::TrimPathsElement::end)
        .property("offset",&pag::TrimPathsElement::offset)
        .property("trimType",&pag::TrimPathsElement::trimType)
        .method("type",&pag::TrimPathsElement::type)
        .method("excludeVaryingRanges",&pag::TrimPathsElement::excludeVaryingRanges)
        .method("verify",&pag::TrimPathsElement::verify)
    ;
	



	registration::class_<pag::RepeaterTransform>("pag::RepeaterTransform")
        .property("anchorPoint",&pag::RepeaterTransform::anchorPoint)
        .property("position",&pag::RepeaterTransform::position)
        .property("scale",&pag::RepeaterTransform::scale)
        .property("rotation",&pag::RepeaterTransform::rotation)
        .property("startOpacity",&pag::RepeaterTransform::startOpacity)
        .property("endOpacity",&pag::RepeaterTransform::endOpacity)
        .method("excludeVaryingRanges",&pag::RepeaterTransform::excludeVaryingRanges)
        .method("verify",&pag::RepeaterTransform::verify)
    ;
	



	registration::class_<pag::RepeaterOrder>("pag::RepeaterOrder")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Below"] = pag::RepeaterOrder::Below;
        _enum["Above"] = pag::RepeaterOrder::Above;
        PAG_Enums["pag::RepeaterOrder"] = _enum;
    }



	registration::class_<pag::RepeaterElement>("pag::RepeaterElement")
        .property("copies",&pag::RepeaterElement::copies)
        .property("offset",&pag::RepeaterElement::offset)
        .property("composite",&pag::RepeaterElement::composite)
        .property("transform",&pag::RepeaterElement::transform)
        .method("type",&pag::RepeaterElement::type)
        .method("excludeVaryingRanges",&pag::RepeaterElement::excludeVaryingRanges)
        .method("verify",&pag::RepeaterElement::verify)
    ;
	



	registration::class_<pag::RoundCornersElement>("pag::RoundCornersElement")
        .property("radius",&pag::RoundCornersElement::radius)
        .method("type",&pag::RoundCornersElement::type)
        .method("excludeVaryingRanges",&pag::RoundCornersElement::excludeVaryingRanges)
        .method("verify",&pag::RoundCornersElement::verify)
    ;

	registration::class_<pag::CameraOption>("pag::CameraOption")
	    .property("zoom",&pag::CameraOption::zoom)
	    .property("depthOfField",&pag::CameraOption::depthOfField)
	    .property("focusDistance",&pag::CameraOption::focusDistance)
	    .property("aperture",&pag::CameraOption::aperture)
	    .property("blurLevel",&pag::CameraOption::blurLevel)
	    .property("irisShape",&pag::CameraOption::irisShape)
	    .property("irisRotation",&pag::CameraOption::irisRotation)
	    .property("irisRoundness",&pag::CameraOption::irisRoundness)
	    .property("irisAspectRatio",&pag::CameraOption::irisAspectRatio)
	    .property("irisDiffractionFringe",&pag::CameraOption::irisDiffractionFringe)
	    .property("highlightGain",&pag::CameraOption::highlightGain)
	    .property("highlightThreshold",&pag::CameraOption::highlightThreshold)
	    .property("highlightSaturation",&pag::CameraOption::highlightSaturation)
	    .method("excludeVaryingRanges",&pag::CameraOption::excludeVaryingRanges)
	    .method("verify",&pag::CameraLayer::verify)
	    ;

    registration::enumeration<pag::LayerType>("pag::LayerType")(
        value("Unknown",pag::LayerType::Unknown),
        value("Null",pag::LayerType::Null),
        value("Solid",pag::LayerType::Solid),
        value("Text",pag::LayerType::Text),
        value("Shape",pag::LayerType::Shape),
        value("Image",pag::LayerType::Image),
        value("PreCompose",pag::LayerType::PreCompose)
    );



	registration::class_<pag::Composition>("pag::Composition")
    ;
	



	registration::class_<pag::VectorComposition>("pag::VectorComposition")
    ;
	



	registration::class_<pag::BitmapComposition>("pag::BitmapComposition")
    ;
	



	registration::class_<pag::ImageBytes>("pag::ImageBytes")
    ;
	



	registration::class_<pag::Cache>("pag::Cache")
    ;
	



	registration::class_<pag::TrackMatteType>("pag::TrackMatteType")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["None"] = pag::TrackMatteType::None;
        _enum["Alpha"] = pag::TrackMatteType::Alpha;
        _enum["AlphaInverted"] = pag::TrackMatteType::AlphaInverted;
        _enum["Luma"] = pag::TrackMatteType::Luma;
        _enum["LumaInverted"] = pag::TrackMatteType::LumaInverted;
        PAG_Enums["pag::TrackMatteType"] = _enum;
    }



	registration::class_<pag::CachePolicy>("pag::CachePolicy")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["Auto"] = pag::CachePolicy::Auto;
        _enum["Enable"] = pag::CachePolicy::Enable;
        _enum["Disable"] = pag::CachePolicy::Disable;
        PAG_Enums["pag::CachePolicy"] = _enum;
    }



	registration::class_<pag::PAGTimeStretchMode>("pag::PAGTimeStretchMode")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["None"] = pag::PAGTimeStretchMode::None;
        _enum["Scale"] = pag::PAGTimeStretchMode::Scale;
        _enum["Repeat"] = pag::PAGTimeStretchMode::Repeat;
        _enum["RepeatInverted"] = pag::PAGTimeStretchMode::RepeatInverted;
        PAG_Enums["pag::PAGTimeStretchMode"] = _enum;
    }

  registration::class_<pag::IrisShapeType>("pag::IrisShapeType")
    ;
  {
    std::map<std::string,pag::Enum> _enum;
    _enum["FastRectangle"] = pag::IrisShapeType::FastRectangle;
    _enum["Triangle"] = pag::IrisShapeType::Triangle;
    _enum["Square"] = pag::IrisShapeType::Square;
    _enum["Pentagon"] = pag::IrisShapeType::Pentagon;
    _enum["Hexagon"] = pag::IrisShapeType::Hexagon;
    _enum["Heptagon"] = pag::IrisShapeType::Heptagon;
    _enum["Octagon"] = pag::IrisShapeType::Octagon;
    _enum["Nonagon"] = pag::IrisShapeType::Nonagon;
    _enum["Decagon"] = pag::IrisShapeType::Decagon;
    PAG_Enums["pag::IrisShapeType"] = _enum;
  }

	registration::class_<pag::Layer>("pag::Layer")
        .property("uniqueID",&pag::Layer::uniqueID)
        .property("id",&pag::Layer::id)
        // .property("parent",&pag::Layer::parent)
        // .property("containingComposition",&pag::Layer::containingComposition)
        .property("name",&pag::Layer::name)
        .property("stretch",&pag::Layer::stretch)
        .property("startTime",&pag::Layer::startTime)
        .property("duration",&pag::Layer::duration)
        .property("autoOrientation",&pag::Layer::autoOrientation)
        .property("motionBlur",&pag::Layer::motionBlur)
        .property("transform",&pag::Layer::transform)
        .property("transform3D",&pag::Layer::transform3D)
        .property("isActive",&pag::Layer::isActive)
        .property("blendMode",&pag::Layer::blendMode)
        .property("trackMatteType",&pag::Layer::trackMatteType)
        .property("trackMatteLayer",&pag::Layer::trackMatteLayer)
        .property("timeRemap",&pag::Layer::timeRemap)
        .property("masks",&pag::Layer::masks)
        .property("effects",&pag::Layer::effects)
        .property("layerStyles",&pag::Layer::layerStyles)
        .property("markers",&pag::Layer::markers)
        .property("cachePolicy",&pag::Layer::cachePolicy)
        // .property("cache",&pag::Layer::cache)
        // .property("locker",&pag::Layer::locker)
        .method("type",&pag::Layer::type)
        .method("excludeVaryingRanges",&pag::Layer::excludeVaryingRanges)
        .method("verify",&pag::Layer::verify)
        .method("getMaxScaleFactor",&pag::Layer::getMaxScaleFactor)
        .method("visibleRange",&pag::Layer::visibleRange)
    ;
	



	registration::class_<pag::NullLayer>("pag::NullLayer")
        .method("type",&pag::NullLayer::type)
    ;
	



	registration::class_<pag::SolidLayer>("pag::SolidLayer")
        .property("solidColor",&pag::SolidLayer::solidColor)
        .property("width",&pag::SolidLayer::width)
        .property("height",&pag::SolidLayer::height)
        .method("type",&pag::SolidLayer::type)
        .method("verify",&pag::SolidLayer::verify)
    ;
	



	registration::class_<pag::TextLayer>("pag::TextLayer")
        .property("sourceText",&pag::TextLayer::sourceText)
        .property("pathOption",&pag::TextLayer::pathOption)
        .property("moreOption",&pag::TextLayer::moreOption)
        .method("type",&pag::TextLayer::type)
        .method("excludeVaryingRanges",&pag::TextLayer::excludeVaryingRanges)
        .method("verify",&pag::TextLayer::verify)
        .method("getTextDocument",&pag::TextLayer::getTextDocument)
    ;
	



	registration::class_<pag::ShapeLayer>("pag::ShapeLayer")
        .property("contents",&pag::ShapeLayer::contents)
        .method("type",&pag::ShapeLayer::type)
        .method("excludeVaryingRanges",&pag::ShapeLayer::excludeVaryingRanges)
        .method("verify",&pag::ShapeLayer::verify)
    ;


	registration::class_<pag::CameraLayer>("pag::CameraLayer")
	    .property("cameraOption",&pag::CameraLayer::cameraOption)
	    .method("type",&pag::CameraLayer::type)
	    .method("excludeVaryingRanges",&pag::CameraLayer::excludeVaryingRanges)
	    .method("verify",&pag::CameraLayer::verify)
	    ;


	registration::class_<pag::PAGScaleMode>("pag::PAGScaleMode")
    ;
	{
        std::map<std::string,pag::Enum> _enum;
        _enum["None"] = pag::PAGScaleMode::None;
        _enum["Stretch"] = pag::PAGScaleMode::Stretch;
        _enum["LetterBox"] = pag::PAGScaleMode::LetterBox;
        _enum["Zoom"] = pag::PAGScaleMode::Zoom;
        PAG_Enums["pag::PAGScaleMode"] = _enum;
    }



	registration::class_<pag::ImageFillRule>("pag::ImageFillRule")
        .property("scaleMode",&pag::ImageFillRule::scaleMode)
        .property("timeRemap",&pag::ImageFillRule::timeRemap)
    ;
	



	registration::class_<pag::ImageLayer>("pag::ImageLayer")
        .property("imageBytes",&pag::ImageLayer::imageBytes)
        .property("imageFillRule",&pag::ImageLayer::imageFillRule)
        .method("type",&pag::ImageLayer::type)
        .method("verify",&pag::ImageLayer::verify)
    ;
	



	registration::class_<pag::PreComposeLayer>("pag::PreComposeLayer")
        .property("composition",&pag::PreComposeLayer::composition)
        .property("compositionStartTime",&pag::PreComposeLayer::compositionStartTime)
        .method("type",&pag::PreComposeLayer::type)
        .method("excludeVaryingRanges",&pag::PreComposeLayer::excludeVaryingRanges)
        .method("verify",&pag::PreComposeLayer::verify)
        .method("getContentStaticTimeRanges",&pag::PreComposeLayer::getContentStaticTimeRanges)
    ;

	registration::class_<pag::CameraLayer>("pag::CameraLayer")
	    .property("cameraOption",&pag::CameraLayer::cameraOption)
	    .method("type",&pag::CameraLayer::type)
	    .method("excludeVaryingRanges",&pag::CameraLayer::excludeVaryingRanges)
	    .method("verify",&pag::CameraLayer::verify)
	    ;

    registration::enumeration<pag::CompositionType>("pag::CompositionType")(
        value("Unknown",pag::CompositionType::Unknown),
        value("Vector",pag::CompositionType::Vector),
        value("Bitmap",pag::CompositionType::Bitmap),
        value("Video",pag::CompositionType::Video)
    );



	registration::class_<pag::Composition>("pag::Composition")
        .property("uniqueID",&pag::Composition::uniqueID)
        .property("id",&pag::Composition::id)
        .property("width",&pag::Composition::width)
        .property("height",&pag::Composition::height)
        .property("duration",&pag::Composition::duration)
        .property("frameRate",&pag::Composition::frameRate)
        .property("backgroundColor",&pag::Composition::backgroundColor)
        .property("audioBytes",&pag::Composition::audioBytes)
        .property("audioMarkers",&pag::Composition::audioMarkers)
        .property("audioStartTime",&pag::Composition::audioStartTime)
        .property("staticTimeRanges",&pag::Composition::staticTimeRanges)
        .method("staticContent",&pag::Composition::staticContent)
        .method("type",&pag::Composition::type)
        .method("verify",&pag::Composition::verify)
    ;
	



	registration::class_<pag::VectorComposition>("pag::VectorComposition")
        .property("layers",&pag::VectorComposition::layers)
        .method("type",&pag::VectorComposition::type)
        .method("verify",&pag::VectorComposition::verify)
    ;
	



	registration::class_<pag::ImageBytes>("pag::ImageBytes")
        .property("uniqueID",&pag::ImageBytes::uniqueID)
        .property("id",&pag::ImageBytes::id)
        .property("width",&pag::ImageBytes::width)
        .property("height",&pag::ImageBytes::height)
        .property("anchorX",&pag::ImageBytes::anchorX)
        .property("anchorY",&pag::ImageBytes::anchorY)
        .property("scaleFactor",&pag::ImageBytes::scaleFactor)
        .property("fileBytes",&pag::ImageBytes::fileBytes)
        .method("verify",&pag::ImageBytes::verify)
    ;
	



	registration::class_<pag::BitmapRect>("pag::BitmapRect")
        .property("x",&pag::BitmapRect::x)
        .property("y",&pag::BitmapRect::y)
        .property("fileBytes",&pag::BitmapRect::fileBytes)
    ;
	



	registration::class_<pag::BitmapFrame>("pag::BitmapFrame")
        .property("isKeyframe",&pag::BitmapFrame::isKeyframe)
        .property("bitmaps",&pag::BitmapFrame::bitmaps)
    ;
	



	registration::class_<pag::BitmapSequence>("pag::BitmapSequence")
        .property("frames",&pag::BitmapSequence::frames)
        .method("duration",&pag::BitmapSequence::duration)
    ;
	



	registration::class_<pag::BitmapComposition>("pag::BitmapComposition")
        .property("sequences",&pag::BitmapComposition::sequences)
        .method("type",&pag::BitmapComposition::type)
        .method("verify",&pag::BitmapComposition::verify)
    ;
	



	registration::class_<pag::VideoComposition>("pag::VideoComposition")
        .property("sequences",&pag::VideoComposition::sequences)
        .method("type",&pag::VideoComposition::type)
        .method("verify",&pag::VideoComposition::verify)
    ;
	



	registration::class_<pag::FontData>("pag::FontData")
        .property_readonly("fontFamily",&pag::FontData::fontFamily)
        .property_readonly("fontStyle",&pag::FontData::fontStyle)
    ;
	



	registration::class_<pag::FileAttributes>("pag::FileAttributes")
        .property("timestamp",&pag::FileAttributes::timestamp)
        .property("pluginVersion",&pag::FileAttributes::pluginVersion)
        .property("aeVersion",&pag::FileAttributes::aeVersion)
        .property("systemVersion",&pag::FileAttributes::systemVersion)
        .property("author",&pag::FileAttributes::author)
        .property("scene",&pag::FileAttributes::scene)
        .property("warnings",&pag::FileAttributes::warnings)
        .method("empty",&pag::FileAttributes::empty)
    ;
	



	registration::class_<pag::PerformanceData>("pag::PerformanceData")
        .property("renderingTime",&pag::PerformanceData::renderingTime)
        .property("imageDecodingTime",&pag::PerformanceData::imageDecodingTime)
        .property("presentingTime",&pag::PerformanceData::presentingTime)
        .property("graphicsMemory",&pag::PerformanceData::graphicsMemory)
    ;
	



	registration::class_<pag::File>("pag::File")
        .property("timeStretchMode",&pag::File::timeStretchMode)
        .property("scaledTimeRange",&pag::File::scaledTimeRange)
        .property("fileAttributes",&pag::File::fileAttributes)
        .property("path",&pag::File::path)
        .property("images",&pag::File::images)
        .property("editableImages",&pag::File::editableImages)
        .property("editableTexts",&pag::File::editableTexts)
        .property("compositions",&pag::File::compositions)
        .property_readonly("duration",&pag::File::duration)
        .property_readonly("frameRate",&pag::File::frameRate)
        .property_readonly("width",&pag::File::width)
        .property_readonly("height",&pag::File::height)
        .property_readonly("tagLevel",&pag::File::tagLevel)
        .property_readonly("backgroundColor",&pag::File::backgroundColor)
        .property_readonly("numTexts",&pag::File::numTexts)
        .property_readonly("numImages",&pag::File::numImages)
        .property_readonly("numVideos",&pag::File::numVideos)
        .property_readonly("numLayers",&pag::File::numLayers)
        .method("getTextData",&pag::File::getTextData)
        .property_readonly("getRootLayer",&pag::File::getRootLayer)
        .method("getTextAt",&pag::File::getTextAt)
        .method("getImageAt",&pag::File::getImageAt)
        .property_readonly("hasScaledTimeRange",&pag::File::hasScaledTimeRange)
    ;
	



	registration::class_<pag::Codec>("pag::Codec")
    ;
	



	registration::class_<pag::PAG>("pag::PAG")
    ;
	


}  

#endif //PAG_METADATA__USERS_CHEN_WORK_PAGPLAYER_SRC_GENERATED_PAG_RTTTR_HPP
